version: 2
jobs:
  build:
    docker:
      - image: devdemisto/content-build:3.0.0.7332  # disable-secrets-detection
    resource_class: medium+
    parallelism: 2
    environment:
      CONTENT_VERSION: "20.6.0"
      SERVER_VERSION: "5.5.0"
      GIT_SHA1: "63646dff0fba977f91d6d9fc2d7fd233bfb5561b" # guardrails-disable-line disable-secrets-detection
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Prepare Environment
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] && [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - instance tests tasks are running only in container number 0"
                exit 0
            fi
            echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
            echo 'export PATH="/home/circleci/.local/bin:${PWD}/node_modules/.bin:${PATH}"' >> $BASH_ENV # disable-secrets-detection
            echo 'export PYTHONPATH="/home/circleci/project:${PYTHONPATH}"' >> $BASH_ENV
            echo 'export DEMISTO_README_VALIDATION=true' >> $BASH_ENV
            echo "=== sourcing $BASH_ENV ==="
            source $BASH_ENV
            sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS
            chmod +x ./Tests/scripts/*
            chmod +x ./Tests/lastest_server_build_scripts/*
            if [ ! -e "venv" ]; then
              echo "installing venv"
              NO_HOOKS=1 SETUP_PY2=yes .hooks/bootstrap
              source ./venv/bin/activate
              pip install -r .circleci/build-requirements.txt
              pip3 install -r .circleci/build-requirements.txt
            else
              echo "venv exists (from cache). activating"
              source ./venv/bin/activate
            fi
            # Install node packages
            npm install .
            # store in bash env so we load our venv in each step
            echo 'source /home/circleci/project/venv/bin/activate' >> $BASH_ENV
            git config diff.renameLimit 6000

            echo "========== Build Parameters =========="
            echo "Parameters: NIGHTLY: $NIGHTLY, INSTANCE_TESTS: $INSTANCE_TESTS, NON_AMI_RUN: $NON_AMI_RUN, SERVER_BRANCH_NAME: $SERVER_BRANCH_NAME, ARTIFACT_BUILD_NUM: $ARTIFACT_BUILD_NUM"
            python --version
            python3 --version
            demisto-sdk --version
      - save_cache:
          paths:
            - venv
            - node_modules
          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - add_ssh_keys:
          fingerprints:
            - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection
            - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection
      - run:
          name: Check if CircleCI's config file is up to date
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping, Should not run on contributor's branch."
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            # Checks if there's any diff from master
            if [[ `git diff origin/master -- .circleci/config.yml` ]]; then
                # Checks if part of the branch's changes
                if [[ -z `git diff origin/master..."$CIRCLE_BRANCH" --name-only | grep .circleci/config.yml` ]]; then
                    echo ".circleci/config.yml has been changed. Merge from master"
                    exit 1
                else
                    echo ".circleci/config.yml is part of the branch changes, proceeding"
                    exit 0
                fi
            else
                echo ".circleci/config.yml is up to date!"
            fi
      - run:
          name: Create ID Set
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            demisto-sdk create-id-set -o ./Tests/id_set.json
      - run:
          name: Validate Files and Yaml
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            # Run flake8 on all excluding Packs (Integraions and Scripts) - they will be handled in linting
            ./Tests/scripts/pyflake.sh *.py
            find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

            [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD="false" || CHECK_BACKWARD="true"
            ./Tests/scripts/validate.sh
      - run:
          name: Secrets
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            demisto-sdk secrets --post-commit --ignore-entropy
      - run:
          name: Build Content Descriptor
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            if [ -n "${GITHUB_TOKEN}" ] ;
              then
                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION --github-token $GITHUB_TOKEN || echo "ignore errors"

              else
                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION || echo "ignore errors"
            fi
      - run:
          name: Common Server Documentation
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            ./Documentation/commonServerDocs.sh
      - run:
          name: Content Docs Site
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ];
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            ./Documentation/docs_site_update.sh
      - run:
          name: Create Content Artifacts
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            demisto-sdk create-content-artifacts -a $CIRCLE_ARTIFACTS
            # create zip with contents of content_new.zip and content_test.zip for use in updating content on instances
            cp "$CIRCLE_ARTIFACTS/content_new.zip" "$CIRCLE_ARTIFACTS/all_content.zip"
            unzip -q "$CIRCLE_ARTIFACTS/content_test.zip" -d "test_content_dir"
            zip -j "$CIRCLE_ARTIFACTS/all_content.zip" test_content_dir/*
            rm -r test_content_dir
      - run:
          name: Calculate Packs Dependencies
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $CIRCLE_ARTIFACTS/packs_dependencies.json
      - store_artifacts:
          path: artifacts
          destination: artifacts
      - run:
          name: Verify Base Branch for Contribution
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;
              then
                python3 ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH
            fi
      - run:
          name: Download Configuration
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/download_demisto_conf.sh

              else
                ./Tests/lastest_server_build_scripts/download_demisto_conf.sh
            fi
      - run:
          name: Download Artifacts
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                echo "Using AMI - Not downloading artifacts"
              else
                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                cp demistoserver.sh ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh
            fi
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
      - run:
          name: Upload Packs To Marketplace Storage
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            EXTRACT_FOLDER=$(mktemp -d)
            PACK_ARTIFACTS=$CIRCLE_ARTIFACTS/content_packs.zip
            PACKS_DEPENDENCIES=$CIRCLE_ARTIFACTS/packs_dependencies.json
            ID_SET=$CIRCLE_ARTIFACTS/id_set.json
            GCS_PATH=$(mktemp)
            echo $GCS_MARKET_KEY > $GCS_PATH
            python3 ./Tests/Marketplace/upload_packs.py -a $PACK_ARTIFACTS -e $EXTRACT_FOLDER -b 'marketplace-dist' -d $PACKS_DEPENDENCIES -i $ID_SET -s $GCS_PATH -n $CIRCLE_BUILD_NUM -k $PACK_SIGNING_KEY -pb 'marketplace-dist-private' -o
            rm $GCS_PATH
          when: always
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
      - run:
          name: Store Artifacts to GCS
          command: ./Tests/scripts/upload_artifacts.sh
          when: always

workflows:
  version: 2
  commit:
    jobs:
      - build
  instances_testing:
    # for details of triggered builds see https://circleci.com/docs/2.0/workflows/#nightly-example
    # for details of cron syntax see https://www.unix.com/man-page/POSIX/1posix/crontab/ disable-secrets-detection
    triggers:
      - schedule:
          # should trigger every day at 2 AM UTC (5 AM Israel Time)
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: instances_test_env
  nightly:
    triggers:
      - schedule:
          # should trigger every day at 9 PM UTC (12 AM Israel Time)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: nightly_env
